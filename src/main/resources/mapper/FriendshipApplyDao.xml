<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.hoggen.sublimation.dao.FriendshipApplyDao">

    <resultMap type="com.hoggen.sublimation.dto.FriendshipDTO" id="FriendshipDTOResultMap">
        <id property="id" column="id" />
        <result property="status" column="status" />
        <result property="userId" column="user_id" />
        <result property="friendId" column="friend_id" />
        <result property="firendCategoryName" column="firend_category_name" />
        <result property="userCategoryName" column="user_category_name" />
        <result property="friendRemark" column="friend_remark" />
        <result property="userRemark" column="user_remark" />
        <!-- 配置一对多的关系
            property：填写pojo类中集合类类属性的名称
            javaType：填写集合类型的名称
        -->

        <association property="user" javaType="com.hoggen.sublimation.dto.UserModelDTO">
            <!-- 配置主键，是关联的唯一标识 -->
            <id property="userId" column="user_id" />
            <result property="name" column="user_name" />
            <result property="avatar" column="avatar" />
        </association>

        <association property="friend" javaType="com.hoggen.sublimation.dto.UserModelDTO">
            <!-- 配置主键，是关联的唯一标识 -->
            <id property="userId" column="2_user_id" />
            <result property="name" column="2_user_name" />
            <result property="avatar" column="2_avatar" />
        </association>

        <!--<collection property="users" javaType="list" ofType="com.hoggen.sublimation.dto.UserModelDTO">-->
            <!--&lt;!&ndash; 配置主键，是关联的唯一标识 &ndash;&gt;-->
            <!--<id property="userId" column="user_id" />-->
            <!--<result property="name" column="user_name" />-->
            <!--<result property="avatar" column="avatar" />-->
        <!--</collection>-->
    </resultMap>

    <resultMap type="com.hoggen.sublimation.entity.FriendshipApply" id="FriendshipApplyMap">
        <id property="id" column="id" />
        <result property="status" column="status" />
        <result property="userId" column="user_id" />
        <result property="friendId" column="friend_id" />
        <result property="firendCategoryName" column="firend_category_name" />
        <result property="userCategoryName" column="user_category_name" />
        <result property="friendRemark" column="friend_remark" />
        <result property="userRemark" column="user_remark" />
    </resultMap>


    <insert id="insertFriendship" parameterType="com.hoggen.sublimation.entity.FriendshipApply"
            useGeneratedKeys="true" keyProperty="id" keyColumn="id">

        <selectKey  keyProperty="id" resultType="java.lang.String" order="BEFORE">
            select uuid()
        </selectKey>
        <!--<selectKey keyProperty="userId" order="AFTER" resultType="java.lang.String">-->
        <!--&lt;!&ndash; SELECT LAST_INSERT_ID()：得到刚insert到数据表中的记录的主键值，只适用于自增主键 &ndash;&gt;-->
        <!--SELECT LAST_INSERT_ID()-->
        <!--</selectKey>-->
        INSERT INTO
        tb_friendship_apply(
        id,
        user_id,
        friend_id,
        status,
        firend_category_name,
        user_category_name,
        friend_remark,
        user_remark,
        create_time)
        VALUES
        (#{id},#{userId},#{friendId},#{status},,#{firendCategoryName},#{userCategoryName},#{friendRemark},#{userRemark},#{createTime})
    </insert>


    <update id="updateFriendship" parameterType="com.hoggen.sublimation.entity.FriendshipApply"
            keyProperty="id" keyColumn="id" useGeneratedKeys="true">
        UPDATE tb_friendship_apply
        <set>
            <if test="status!=0 and status!=null ">status=#{status},</if>
            <if test="firendCategoryName!=null ">firend_category_name=#{firendCategoryName},</if>
            <if test="userCategoryName!=null ">user_category_name=#{userCategoryName},</if>
            <if test="friendRemark!=null ">friend_remark=#{friendRemark},</if>
            <if test="userRemark!=null ">user_remark=#{userRemark},</if>
            <if test="deleteStatus!=0 and deleteStatus!=null ">p.delete_status=#{deleteStatus},</if>
        </set>
        WHERE id = #{id}
    </update>
    <select id="queryUserList" resultMap="FriendshipDTOResultMap"
            parameterType="String">
        <!-- 具体的sql -->
        SELECT
        p.id,
        p.user_id,
        p.friend_id,
        p.firend_category_name,
        p.user_category_name,
        p.status,
        p.friend_remark,
        p.user_remark,

        p1.user_id,
        p1.user_name,
        p1.avatar,

        p2.user_id as '2_user_id',
        p2.user_name as '2_user_name',
        p2.avatar as '2_avatar'

        FROM
        tb_friendship_apply as p
        LEFT JOIN tb_user as p1 ON p1.user_id = p.user_id
        LEFT JOIN tb_user as p2 ON  p2.user_id = p.friend_id
        WHERE 1=1
        AND
        p.delete_status=0
        AND
        p.status=1
        AND (p.user_id =
        #{userId}
        or p.friend_id =
        #{userId} )
    </select>


    <select id="queryApplyUserList" resultMap="FriendshipDTOResultMap"
            parameterType="String">
        <!-- 具体的sql -->
        SELECT
        p.id,
        p.user_id,
        p.friend_id,
        p.status,
        p.firend_category_name,
        p.user_category_name,
        p.friend_remark,
        p.user_remark,

        p1.user_id,
        p1.user_name,
        p1.avatar,

        p2.user_id as '2_user_id',
        p2.user_name as '2_user_name',
        p2.avatar as '2_avatar'

        FROM
        tb_friendship_apply as p
        LEFT JOIN tb_user as p1 ON p1.user_id = p.user_id
        LEFT JOIN tb_user as p2 ON p2.user_id = p.friend_id
        WHERE 1=1
        AND
        p.delete_status=0
        AND
        p.status=0
        AND (p.user_id =
        #{userId}
        or p.friend_id =
        #{userId} )
    </select>


    <select id="queryApplyList" resultMap="FriendshipApplyMap">
            SELECT
            id,
            user_id,
            friend_id,
            firend_category_name,
            user_category_name,
            friend_remark,
            user_remark,
            status
            FROM
            tb_friendship_apply

            WHERE 1=1
        AND
        delete_status=0
        and
        (user_id =
        #{userId}
        or friend_id =
        #{userId} )
    </select>


    <select id="queryFriendshipApply" resultMap="FriendshipApplyMap">
            SELECT
            id,
            user_id,
            friend_id,
            firend_category_name,
            user_category_name,
            friend_remark,
            user_remark,
            status
            FROM
            tb_friendship_apply

            WHERE 1=1
        AND
        id=#{applyId}
        AND
        delete_status=0
    </select>




</mapper>
